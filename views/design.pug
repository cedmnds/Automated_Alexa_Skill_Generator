extends layout

block content
  body
    script(src="/blockly/blockly_compressed.js")
    script(src="/blockly/blocks_compressed.js")
    script(src="/blockly/python_compressed.js")
    script(src="/blockly/msg/js/en.js")
    p
      button(onclick='showCode()') Show Python
    //-   button(onclick='runCode()') Run JavaScript
    #blocklyDiv(style='height: 480px; width: 600px;')
    xml#toolbox(style='display: none')
      category(name='Logic')
        block(type='controls_if')
        block(type='logic_compare')
        block(type='logic_operation')
        block(type='logic_negate')
        block(type='logic_boolean')
      category(name='Loops')
        block(type='controls_repeat_ext')
          value(name='TIMES')
            block(type='math_number')
              field(name='NUM') 10
        block(type='controls_whileUntil')
      category(name='Math')
        block(type='math_number')
        block(type='math_arithmetic')
        block(type='math_single')
      category(name='Text')
        block(type='text')
        block(type='text_length')
        block(type='text_print')
      category(name='Custom Blocks')
        block(type='intent_block')
    xml#startBlocks(style='display: none')
      block(type='controls_if', inline='false', x='20', y='20')
        mutation(else='1')
        value(name='IF0')
          block(type='logic_compare', inline='true')
            field(name='OP') EQ
            value(name='A')
              block(type='math_arithmetic', inline='true')
                field(name='OP') MULTIPLY
                value(name='A')
                  block(type='math_number')
                    field(name='NUM') 6
                value(name='B')
                  block(type='math_number')
                    field(name='NUM') 7
            value(name='B')
              block(type='math_number')
                field(name='NUM') 42
        statement(name='DO0')
          block(type='text_print', inline='false')
            value(name='TEXT')
              block(type='text')
                field(name='TEXT') Don't panic
        statement(name='ELSE')
          block(type='text_print', inline='false')
            value(name='TEXT')
              block(type='text')
                field(name='TEXT') Panic
    script.
        var workspace = Blockly.inject('blocklyDiv',
            {media: '/blockly/media/',
            toolbox: document.getElementById('toolbox')});
            Blockly.Xml.domToWorkspace(document.getElementById('startBlocks'),
            workspace);
        Blockly.Blocks['intent_block'] = {
            init: function () {
                this.appendValueInput("sample_utterances")
                    .setCheck("Array")
                    .appendField("sample_utterances");
                this.appendValueInput("slots")
                    .setCheck("Array")
                    .appendField("slots");
                this.setPreviousStatement(true, null);
                this.setNextStatement(true, null);
                this.setColour(225);
                this.setTooltip("");
                this.setHelpUrl("https://developer.amazon.com/docs/custom-skills/create-intents-utterances-and-slots.html");
            }
        };
        function showCode() {
            // Generate Pyton code and display it.
            Blockly.Python.INFINITE_LOOP_TRAP = null;
            var code = Blockly.Python.workspaceToCode(workspace);
            alert(code);
        }
        function runCode() {
            // Generate Python code and run it.
            window.LoopTrap = 1000;
            Blockly.Python.INFINITE_LOOP_TRAP =
            'if (--window.LoopTrap == 0) throw "Infinite loop.";\\n';
            var code = Blockly.Python.workspaceToCode(workspace);
            Blockly.Python.INFINITE_LOOP_TRAP = null;
            try {
                eval(code);
            } catch (e) {
                alert(e);
            }
        }
