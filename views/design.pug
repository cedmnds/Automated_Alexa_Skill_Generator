extends layout

block content
  body
    script(src="/blockly/blockly_compressed.js")
    script(src="/blockly/blocks_compressed.js")
    script(src="/blockly/python_compressed.js")
    script(src="/blockly/msg/js/en.js")
    p
      button(onclick='showCode()') Show Python
    //-   button(onclick='runCode()') Run JavaScript
    #blocklyDiv(style='height: 600px; width: 1250px;')
    xml#toolbox(style='display: none')
      category(name='Logic')
        block(type='controls_if')
        block(type='logic_compare')
        block(type='logic_operation')
        block(type='logic_negate')
        block(type='logic_boolean')
      category(name='Loops')
        block(type='controls_repeat_ext')
          value(name='TIMES')
            block(type='math_number')
              field(name='NUM') 10
        block(type='controls_whileUntil')
      category(name='Math')
        block(type='math_number')
        block(type='math_arithmetic')
        block(type='math_single')
      category(name='Text')
        block(type='text')
        block(type='text_length')
        block(type='text_print')
      category(name='Lists')
        block(type='lists_create_with')
      category(name='Alexa Skill Blocks')
        block(type='custom_skill_name_block')
        block(type='language_model_block')
        block(type='intent_block')
    xml#startBlocks(style='display: none')
      block(type='custom_skill_name_block', inline='false', x='20', y='20')
        value(name='custom_skill_name')
          block(type='text')
            field(name='TEXT') SampleCustomAlexaSkill
        next
          block(type='language_model_block', inline='false', x='20', y='20')
            value(name='intents')
              block(type='lists_create_with')
                mutation(items=4)
                value(name='ADD0')
                  block(type='intent_block')
                    value(name='name')
                      block(type='text')
                        field(name='TEXT') AMAZON.CancelIntent
                    value(name='samples')
                      block(type='lists_create_with')
                        mutation(items=0)
                    value(name='slots')
                      block(type='lists_create_with')
                        mutation(items=0)
                value(name='ADD1')
                  block(type='intent_block')
                    value(name='name')
                      block(type='text')
                        field(name='TEXT') AMAZON.HelpIntent
                    value(name='samples')
                      block(type='lists_create_with')
                        mutation(items=0)
                    value(name='slots')
                      block(type='lists_create_with')
                        mutation(items=0)
                value(name='ADD2')
                  block(type='intent_block')
                    value(name='name')
                      block(type='text')
                        field(name='TEXT') AMAZON.StopIntent
                    value(name='samples')
                      block(type='lists_create_with')
                        mutation(items=0)
                    value(name='slots')
                      block(type='lists_create_with')
                        mutation(items=0)
                value(name='ADD3')
                  block(type='intent_block')
                    value(name='name')
                      block(type='text')
                        field(name='TEXT') CustomAlexaIntent
                    value(name='samples')
                      block(type='lists_create_with')
                        mutation(items=0)
                    value(name='slots')
                      block(type='lists_create_with')
                        mutation(items=0)

    script.
        Blockly.Blocks['custom_skill_name_block'] = {
            init: function () {
                this.appendValueInput("custom_skill_name")
                    .setCheck("String")
                    .appendField("custom_skill_name");
                this.setNextStatement(true, null);
                this.setColour(100);
                this.setTooltip("");
                this.setHelpUrl("https://developer.amazon.com/docs/smapi/interaction-model-schema.html");
            }
        };
        Blockly.Blocks['language_model_block'] = {
            init: function () {
                this.appendValueInput("intents")
                    .setCheck("Array")
                    .appendField("intents");
                this.setPreviousStatement(true, null);
                this.setNextStatement(true, null);
                this.setColour(100);
                this.setTooltip("");
                this.setHelpUrl("https://developer.amazon.com/docs/smapi/interaction-model-schema.html");
            }
        };
        Blockly.Blocks['intent_block'] = {
            init: function () {
                this.appendValueInput("name")
                    .setCheck("String")
                    .appendField("name");
                this.appendValueInput("slots")
                    .setCheck("Array")
                    .appendField("slots (optional)");
                this.appendValueInput("samples")
                    .setCheck("Array")
                    .appendField("samples");
                this.setOutput(true, null);
                this.setColour(225);
                this.setTooltip("");
                this.setHelpUrl("https://developer.amazon.com/docs/custom-skills/create-intents-utterances-and-slots.html");
            }
        };
        var workspace = Blockly.inject('blocklyDiv',
            {media: '/blockly/media/',
            toolbox: document.getElementById('toolbox')});
            Blockly.Xml.domToWorkspace(document.getElementById('startBlocks'),
            workspace);
        Blockly.Python['custom_skill_name_block'] = function (block) {
            var value_custom_skill_name = Blockly.Python.valueToCode(block, 'custom_skill_name', Blockly.Python.ORDER_ATOMIC);
            var code = 'custom_skill_name = ' + value_custom_skill_name + '\n';
            return code;
        };
        Blockly.Python['language_model_block'] = function (block) {
            var value_intents = Blockly.Python.valueToCode(block, 'intents', Blockly.Python.ORDER_ATOMIC);
            var code = 'intents = ' + value_intents;
            return code;
        };
        Blockly.Python['intent_block'] = function (block) {
            var value_name = Blockly.Python.valueToCode(block, 'name', Blockly.Python.ORDER_ATOMIC);
            var value_samples = Blockly.Python.valueToCode(block, 'samples', Blockly.Python.ORDER_ATOMIC);
            var value_slots = Blockly.Python.valueToCode(block, 'slots', Blockly.Python.ORDER_ATOMIC);
            var code = '{name: ' + value_name + ', slots: ' + value_slots + ', samples: ' + value_samples + '}';
            return [code];
        };
        function showCode() {
            // Generate Python code and display it.
            Blockly.Python.INFINITE_LOOP_TRAP = null;
            var code = Blockly.Python.workspaceToCode(workspace);
            alert(code);
        }
        function runCode() {
            // Generate Python code and run it.
            window.LoopTrap = 1000;
            Blockly.Python.INFINITE_LOOP_TRAP =
            'if (--window.LoopTrap == 0) throw "Infinite loop.";\\n';
            var code = Blockly.Python.workspaceToCode(workspace);
            Blockly.Python.INFINITE_LOOP_TRAP = null;
            try {
                eval(code);
            } catch (e) {
                alert(e);
            }
        }
