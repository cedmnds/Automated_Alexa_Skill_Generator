extends layout

block content
  body
    script(src="/blockly/blockly_compressed.js")
    script(src="/blockly/blocks_compressed.js")
    script(src="/blockly/python_compressed.js")
    script(src="/blockly/msg/js/en.js")
    if signed_in
        ul(id='workspace_list') Workspaces
            each workspace in workspaces1
                li(class='workspaces' xmlCode=workspace.workspace)= workspace.name
            else
                li There are no workspaces
    div.mt-2(align='center')
      #blocklyDiv(style='height: 80vh; width: 100vw;', align='left')
      button.btn.btn-danger.mt-2(onclick='showCode()', type='button') Show Code
      form(method="POST" action='/saveworkspace')
        input(type='text' id='xmlWorkspaceName' name='workspaceName')
        input(type='hidden' id='xmlWorkspace' name='xml' value='')
        button.btn.btn-danger.ml-2.mt-2(onclick='saveToXML()', type='submit') Save Workspace
      //- TODO: Add function for generating skill.
      form(method="POST" action="/generateSkill")
        input(type="hidden" id="hidden" name="content" vlaue="<?php echo $row[1] ?>")
        button.btn.btn-danger.mt-2(name="show-code" onclick='sendCodeToServer()' type='submit') Generate Skill
      a(href='/help' target="_blank")
        button.btn.btn-danger.mt-2(type='button') Help
    xml#toolbox(style='display: none')
      category(name='Logic')
        block(type='controls_if')
        block(type='logic_compare')
        block(type='logic_operation')
        block(type='logic_negate')
        block(type='logic_boolean')
      category(name='Loops')
        block(type='controls_repeat_ext')
          value(name='TIMES')
            block(type='math_number')
              field(name='NUM') 10
        block(type='controls_whileUntil')
      category(name='Math')
        block(type='math_number')
        block(type='math_arithmetic')
        block(type='math_single')
      category(name='Text')
        block(type='text')
        block(type='text_length')
        block(type='text_print')
        block(type='text_join')
      category(name='Lists')
        block(type='lists_create_with')
      category(name='Variables', custom='VARIABLE')
      category(name='Alexa Skill Blocks')
        block(type='language_model_block')
        block(type='intent_block')
        //block(type='slot_block')
        //block(type='type_block')
        block(type='api_request_block')
        block(type='bongo_block')
        //block(type='parameter_block')
    xml#startBlocks(style='display: none')
        block(type='language_model_block', inline='false', x='20', y='20')
            value(name='custom_skill_name')
                block(type='text')
                    field(name='TEXT') SampleCustomAlexaSkill
            value(name='intents')
                block(type='lists_create_with')
                    mutation(items=1)
                    value(name='ADD0')
                        block(type='intent_block')
                            value(name='name')
                                block(type='text')
                                    field(name='TEXT') CustomAlexaIntent
                            value(name='samples')
                                block(type='lists_create_with')
                                    mutation(items=1)
                                    value(name='ADD0')
                                        block(type='text')
                                            field(name='TEXT') SampleUtterance
                            value(name='lambda_function')
                                block(type='bongo_block', inline='false', x='20', y='20')
    script.
        Blockly.Blocks['language_model_block'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("skill name:")
                    .appendField(new Blockly.FieldTextInput("AlexaSkill"), "custom_skill_name");
                this.appendValueInput("intents")
                    .setCheck("Array")
                    .appendField("intents:");
                this.setPreviousStatement(true, null);
                //this.setNextStatement(true, null);
                this.setColour(120);
                this.setTooltip("");
                this.setHelpUrl("https://developer.amazon.com/docs/smapi/interaction-model-schema.html");
            }
        };
        Blockly.Blocks['intent_block'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("name:")
                    .appendField(new Blockly.FieldTextInput("AlexaIntent"), "name");
                //this.appendValueInput("slots")
                    //.setCheck("Array")
                    //.appendField("slots (optional)");
                this.appendValueInput("samples")
                    .setCheck("Array")
                    .appendField("phrases:");
                //this.appendValueInput("types")
                    //.setCheck("Array")
                    //.appendField("types");
                this.appendValueInput("lambda_function")
                    .appendField("response:");
                this.setOutput(true, null);
                this.setColour(225);
                this.setTooltip("");
                this.setHelpUrl("https://developer.amazon.com/docs/custom-skills/create-intents-utterances-and-slots.html");
            }
        };
        /*
        Blockly.Blocks['slot_block'] = {
            init: function () {
                this.appendValueInput("slot_name")
                    .setCheck("String")
                    .appendField("slot_name");
                this.appendValueInput("slot_type")
                    .setCheck("String")
                    .appendField("slot_type");
                this.setOutput(true, null);
                this.setColour(300);
                this.setTooltip("");
                this.setHelpUrl("https://developer.amazon.com/docs/custom-skills/create-intents-utterances-and-slots.html");
            }
        };
        Blockly.Blocks['type_block'] = {
            init: function () {
                this.appendValueInput("type_name")
                    .setCheck("String")
                    .appendField("type_name");
                this.appendValueInput("type_values")
                    .setCheck("Array")
                    .appendField("type_values");
                this.setOutput(true, null);
                this.setColour(300);
                this.setTooltip("");
                this.setHelpUrl("https://developer.amazon.com/docs/custom-skills/create-intents-utterances-and-slots.html");
            }
        };
        */
        Blockly.Blocks['api_request_block'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("url:")
                    .appendField(new Blockly.FieldTextInput("www.sample.com"), "base_url");
                this.appendDummyInput()
                    .appendField("parameter key:")
                    .appendField(new Blockly.FieldTextInput(""), "key");
                this.appendDummyInput()
                    .appendField("parameter value:")
                    .appendField(new Blockly.FieldTextInput(""), "value");
                this.setOutput(true, null);
                this.setColour(120);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        Blockly.Blocks['bongo_block'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("url:")
                    .appendField(new Blockly.FieldTextInput("http://api.ebongo.org/stop?"), "base_url");
                this.appendDummyInput()
                    .appendField("parameter key:")
                    .appendField("stopID");
                this.appendDummyInput()
                    .appendField("parameter value:")
                    .appendField(new Blockly.FieldTextInput(""), "value");
                this.setOutput(true, null);
                this.setColour(120);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        /*
        Blockly.Blocks['parameter_block'] = {
            init: function () {
                this.appendDummyInput()
                    .appendField("key:")
                    .appendField(new Blockly.FieldTextInput(""), "key");
                this.appendDummyInput()
                    .appendField("value:")
                    .appendField(new Blockly.FieldTextInput(""), "value");
                this.setOutput(true, null);
                this.setColour(300);
                this.setTooltip("");
                this.setHelpUrl("");
            }
        };
        */
        var workspace = Blockly.inject('blocklyDiv',
            {media: '/blockly/media/',
            toolbox: document.getElementById('toolbox')});
            Blockly.Xml.domToWorkspace(document.getElementById('startBlocks'),
            workspace);
        Blockly.Python['language_model_block'] = function (block) {
            var value_custom_skill_name = block.getFieldValue('custom_skill_name');
            var value_intents = Blockly.Python.valueToCode(block, 'intents', Blockly.Python.ORDER_ATOMIC);
            var code = '{"interactionModel": { "languageModel": {"invocationName": "' + value_custom_skill_name + '", ' + '"intents": ' + value_intents + '}}}';
            return code;
        };
        Blockly.Python['intent_block'] = function (block) {
            var value_name = block.getFieldValue('name');
            var value_samples = Blockly.Python.valueToCode(block, 'samples', Blockly.Python.ORDER_ATOMIC);
            //var value_slots = Blockly.Python.valueToCode(block, 'slots', Blockly.Python.ORDER_ATOMIC);
            //var value_types = Blockly.Python.valueToCode(block, 'types', Blockly.Python.ORDER_ATOMIC);
            var value_lambda_function = Blockly.Python.valueToCode(block, 'lambda_function', Blockly.Python.ORDER_ATOMIC);
            var code = '{"name": "' + value_name + '", "samples": ' + value_samples + ', "lambda_function": ' + value_lambda_function + '}';
            return [code];
        };
        /*
        Blockly.Python['slot_block'] = function (block) {
            var value_slot_name = Blockly.Python.valueToCode(block, 'slot_name', Blockly.Python.ORDER_ATOMIC);
            var value_slot_type = Blockly.Python.valueToCode(block, 'slot_type', Blockly.Python.ORDER_ATOMIC);
            var code = '{"name": ' + value_slot_name + ', "type": ' + value_slot_type + '}';
            return [code];
        };
        Blockly.Python['type_block'] = function (block) {
            var value_type_name = Blockly.Python.valueToCode(block, 'type_name', Blockly.Python.ORDER_ATOMIC);
            var value_type_values = Blockly.Python.valueToCode(block, 'type_values', Blockly.Python.ORDER_ATOMIC);
            var code = '{"name": ' + value_type_name + ', "values": ' + value_type_values + '}';
            return [code];
        };

        Blockly.Python['parameter_block'] = function (block) {
            var value_key = block.getFieldValue('key');
            var value_value = block.getFieldValue('value');
            var code = '{"key": ' + value_key + ', "value": ' + value_value + '}';
            return [code];
        };
        */
        Blockly.Python['api_request_block'] = function (block) {
            var value_base_url = block.getFieldValue('base_url');
            var value_key = block.getFieldValue('key');
            var value_value = block.getFieldValue('value');
            var code = '{"base_url": "' + value_base_url + '", "parameter": {"key": "' + value_key + '", "value": "' + value_value + '"}}';
            return [code];
        };
        Blockly.Python['bongo_block'] = function (block) {
            var value_base_url = block.getFieldValue('base_url');
            var value_value = block.getFieldValue('value');
            var code = '{"base_url": "' + value_base_url + '", "parameter": {"key": "stopID", "value": "' + value_value + '"}}';
            return [code];
        };
        function sendCodeToServer() {
            // Generate Python code and display it.
            Blockly.Python.INFINITE_LOOP_TRAP = null;
            var code = Blockly.Python.workspaceToCode(workspace);
            document.getElementById("hidden").value = code;
            //- alert(code);
        }
        function showCode() {
            // Generate JS code and display it.
            Blockly.Python.INFINITE_LOOP_TRAP = null;
            var code = Blockly.Python.workspaceToCode(workspace);
            alert(code);
        }
        function runCode() {
            // Generate JS code and run it.
            window.LoopTrap = 1000;
            Blockly.Python.INFINITE_LOOP_TRAP =
            'if (--window.LoopTrap == 0) throw "Infinite loop.";\\n';
            var code = Blockly.Python.workspaceToCode(workspace);
            Blockly.Python.INFINITE_LOOP_TRAP = null;
            try {
                eval(code);
            } catch (e) {
                alert(e);
            }
        }
        function saveToXML(){
          var xml = Blockly.Xml.workspaceToDom(workspace);
          var xml_text = Blockly.Xml.domToText(xml);
          document.getElementById('xmlWorkspace').value = xml_text;
          document.getElementById('xmlWorkspaceName').value = document.getElementById('xmlWorkspaceName').trim();
        }
        document.getElementById('workspace_list').addEventListener("click",function(workspace_item){
            var text = workspace_item.target.getAttribute('xmlcode');
            var xml = Blockly.Xml.textToDom(text);
            workspace.clear();
            Blockly.Xml.domToWorkspace(xml, workspace);
            //Blockly.Xml.clearWorkspaceAndLoadFromXml(xml, Blockly.workspace);
        });
